generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                    Int               @id @default(autoincrement())
  firstName             String?
  lastName              String?
  email                 String?           @unique
  phone                 String?           @unique
  password              String?
  firebaseUid           String?           @unique
  role                  Role              @default(USER)
  isDeleted             Boolean           @default(false)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  profileImage          String?           // Cloudinary image URL
  hasSetPreferences     Boolean           @default(false) // Track if user has set preferences
  categoryCreated       category[]
  likes                 like[]            // One-to-many relationship with likes
  comments              comment[]         // One-to-many relationship with comments
  userPreferences       userPreference[]  // Many-to-many relationship with categories
}

enum Role {
  USER
  ADMIN
}

model category {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  imageUrl        String?          @unique
  isDeleted       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdById     Int?
  createdBy       user?            @relation(fields: [createdById], references: [id])
  deletedAt       DateTime?
  popularity      Int              @default(0)
  posts           post[]           // One-to-many relationship with posts
  userPreferences userPreference[] // Many-to-many relationship with users
}

model post {
  id         Int       @id @default(autoincrement())
  attachment String // Cloudinary URL for photo or video
  categoryId Int? // Foreign key to category
  category   category? @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  likes      like[] // One-to-many relationship with likes
  comments   comment[] // One-to-many relationship with comments
  likeCount  Int       @default(0) // Counter cache for likes
}

model like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int // Foreign key to post
  userId    Int // Foreign key to user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model userPreference {
  id         Int      @id @default(autoincrement())
  userId     Int
  categoryId Int
  weight     Float    @default(1.0) // Weight for preference (higher = more preferred)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}
